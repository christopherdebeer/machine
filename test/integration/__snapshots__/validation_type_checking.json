{
  "json": {
    "title": "Phase 4: Type Checking Examples",
    "attributes": [],
    "nodes": [
      {
        "name": "validTypes",
        "type": "task",
        "attributes": [
          {
            "name": "name",
            "type": "string",
            "value": "DyGram"
          },
          {
            "name": "count",
            "type": "number",
            "value": 42
          },
          {
            "name": "enabled",
            "type": "boolean",
            "value": true
          },
          {
            "name": "response",
            "type": "Promise<Response>",
            "value": "pending"
          },
          {
            "name": "users",
            "type": "Array<User>",
            "value": []
          },
          {
            "name": "cache",
            "type": "Map<string, any>",
            "value": []
          },
          {
            "name": "asyncData",
            "type": "Promise<Array<Record>>",
            "value": "loading"
          },
          {
            "name": "optionalValue",
            "type": "string",
            "value": "null"
          }
        ]
      },
      {
        "name": "typeInference",
        "type": "task",
        "attributes": [
          {
            "name": "inferredString",
            "value": "Hello"
          },
          {
            "name": "inferredNumber",
            "value": 123
          },
          {
            "name": "inferredBoolean",
            "value": false
          },
          {
            "name": "inferredArray",
            "value": [
              "a",
              "b",
              "c"
            ]
          }
        ]
      },
      {
        "name": "apiConfig",
        "type": "context",
        "attributes": [
          {
            "name": "baseUrl",
            "type": "string",
            "value": "https://api.example.com"
          },
          {
            "name": "timeout",
            "type": "number",
            "value": 5000
          },
          {
            "name": "retries",
            "type": "number",
            "value": 3
          }
        ]
      },
      {
        "name": "apiCall",
        "type": "task",
        "attributes": [
          {
            "name": "url",
            "type": "string",
            "value": "{{ apiConfig.baseUrl }}"
          },
          {
            "name": "maxRetries",
            "type": "number",
            "value": 5
          }
        ]
      },
      {
        "name": "dataProcessing",
        "type": "task",
        "attributes": [
          {
            "name": "userCache",
            "type": "Map<string, User>",
            "value": []
          },
          {
            "name": "fetchUsers",
            "type": "Promise<Array<User>>",
            "value": "pending"
          },
          {
            "name": "transformer",
            "type": "Function<Input, Output>",
            "value": "null"
          }
        ]
      },
      {
        "name": "edgeCases",
        "type": "task",
        "attributes": [
          {
            "name": "emptyArray",
            "type": "Array<any>",
            "value": []
          },
          {
            "name": "flexible",
            "type": "any",
            "value": "can be anything"
          }
        ]
      }
    ],
    "edges": [],
    "notes": [],
    "inferredDependencies": [
      {
        "source": "apiCall",
        "target": "apiConfig",
        "reason": "reads url",
        "path": "apiConfig.baseUrl"
      }
    ]
  },
  "graphviz": "digraph {\n  // Graph attributes\n  label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"center\"><font point-size=\"12\"><b>Phase 4: Type Checking Examples</b></font></td></tr></table>>;\n  labelloc=\"t\";\n  fontsize=10;\n  fontname=\"Arial\";\n  compound=true;\n  rankdir=TB;\n  pad=0.25;\n  node [fontname=\"Arial\", fontsize=10];\n  edge [fontname=\"Arial\", fontsize=9];\n\n  // Node definitions with nested namespaces\n  \"validTypes\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>validTypes</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"name__key\" align=\"left\" balign=\"left\">name : string</td><td port=\"name__value\" align=\"left\" balign=\"left\">DyGram</td></tr><tr><td port=\"count__key\" align=\"left\" balign=\"left\">count : number</td><td port=\"count__value\" align=\"left\" balign=\"left\">42</td></tr><tr><td port=\"enabled__key\" align=\"left\" balign=\"left\">enabled : boolean</td><td port=\"enabled__value\" align=\"left\" balign=\"left\">true</td></tr><tr><td port=\"response__key\" align=\"left\" balign=\"left\">response : Promise&lt;Response&gt;</td><td port=\"response__value\" align=\"left\" balign=\"left\">pending</td></tr><tr><td port=\"users__key\" align=\"left\" balign=\"left\">users : Array&lt;User&gt;</td><td port=\"users__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"cache__key\" align=\"left\" balign=\"left\">cache : Map&lt;string, any&gt;</td><td port=\"cache__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"asyncData__key\" align=\"left\" balign=\"left\">asyncData : Promise&lt;Array&lt;Record&gt;&gt;</td><td port=\"asyncData__value\" align=\"left\" balign=\"left\">loading</td></tr><tr><td port=\"optionalValue__key\" align=\"left\" balign=\"left\">optionalValue : string</td><td port=\"optionalValue__value\" align=\"left\" balign=\"left\">null</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 4 issues</b><br/>Type mismatch: expected Promise&lt;Response&gt;, got str...<br/>Type mismatch: expected Array&lt;User&gt;, got Array&lt;Use...<br/><i>... and 2 more</i></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"typeInference\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>typeInference</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"inferredString__key\" align=\"left\" balign=\"left\">inferredString</td><td port=\"inferredString__value\" align=\"left\" balign=\"left\">Hello</td></tr><tr><td port=\"inferredNumber__key\" align=\"left\" balign=\"left\">inferredNumber</td><td port=\"inferredNumber__value\" align=\"left\" balign=\"left\">123</td></tr><tr><td port=\"inferredBoolean__key\" align=\"left\" balign=\"left\">inferredBoolean</td><td port=\"inferredBoolean__value\" align=\"left\" balign=\"left\">false</td></tr><tr><td port=\"inferredArray__key\" align=\"left\" balign=\"left\">inferredArray</td><td port=\"inferredArray__value\" align=\"left\" balign=\"left\">[\n  &quot;a&quot;,\n  &quot;b&quot;,\n  &quot;c&quot;\n]</td></tr></table></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n  \"apiConfig\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>apiConfig</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"baseUrl__key\" align=\"left\" balign=\"left\">baseUrl : string</td><td port=\"baseUrl__value\" align=\"left\" balign=\"left\">https://api.example.com</td></tr><tr><td port=\"timeout__key\" align=\"left\" balign=\"left\">timeout : number</td><td port=\"timeout__value\" align=\"left\" balign=\"left\">5000</td></tr><tr><td port=\"retries__key\" align=\"left\" balign=\"left\">retries : number</td><td port=\"retries__value\" align=\"left\" balign=\"left\">3</td></tr></table></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\"];\n  \"apiCall\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>apiCall</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"url__key\" align=\"left\" balign=\"left\">url : string</td><td port=\"url__value\" align=\"left\" balign=\"left\">{{ apiConfig.baseUrl }}</td></tr><tr><td port=\"maxRetries__key\" align=\"left\" balign=\"left\">maxRetries : number</td><td port=\"maxRetries__value\" align=\"left\" balign=\"left\">5</td></tr></table></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n  \"dataProcessing\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>dataProcessing</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"userCache__key\" align=\"left\" balign=\"left\">userCache : Map&lt;string, User&gt;</td><td port=\"userCache__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"fetchUsers__key\" align=\"left\" balign=\"left\">fetchUsers : Promise&lt;Array&lt;User&gt;&gt;</td><td port=\"fetchUsers__value\" align=\"left\" balign=\"left\">pending</td></tr><tr><td port=\"transformer__key\" align=\"left\" balign=\"left\">transformer : Function&lt;Input, Output&gt;</td><td port=\"transformer__value\" align=\"left\" balign=\"left\">null</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 3 issues</b><br/>Type mismatch: expected Map&lt;string, User&gt;, got Map...<br/>Type mismatch: expected Promise&lt;Array&lt;User&gt;&gt;, got ...<br/><i>... and 1 more</i></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"edgeCases\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>edgeCases</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"emptyArray__key\" align=\"left\" balign=\"left\">emptyArray : Array&lt;any&gt;</td><td port=\"emptyArray__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"flexible__key\" align=\"left\" balign=\"left\">flexible : any</td><td port=\"flexible__value\" align=\"left\" balign=\"left\">can be anything</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Array&lt;any&gt;, got Array&lt;any&gt;...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n\n\n  // Validation Warnings\n  \"warning_validTypes_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Response&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_validTypes_0\" -> \"validTypes\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_validTypes_1\" [label=<ðŸ”´ Type mismatch: expected Array&lt;User&gt;,<br/>got Array&lt;User&gt;. Expected array,<br/>received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_validTypes_1\" -> \"validTypes\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_validTypes_2\" [label=<ðŸ”´ Type mismatch: expected Map&lt;string,<br/>any&gt;, got Map&lt;string, any&gt;. Expected<br/>object, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_validTypes_2\" -> \"validTypes\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_validTypes_3\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Array&lt;Record&gt;&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_validTypes_3\" -> \"validTypes\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_dataProcessing_0\" [label=<ðŸ”´ Type mismatch: expected Map&lt;string,<br/>User&gt;, got Map&lt;string, User&gt;. Expected<br/>object, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_dataProcessing_0\" -> \"dataProcessing\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_dataProcessing_1\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Array&lt;User&gt;&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_dataProcessing_1\" -> \"dataProcessing\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_dataProcessing_2\" [label=<ðŸ”´ Type mismatch: expected<br/>Function&lt;Input, Output&gt;, got null>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_dataProcessing_2\" -> \"dataProcessing\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_edgeCases_0\" [label=<ðŸ”´ Type mismatch: expected Array&lt;any&gt;,<br/>got Array&lt;any&gt;. Expected array, received<br/>string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_edgeCases_0\" -> \"edgeCases\" [style=dashed, color=\"#999999\", arrowhead=none];\n\n  // Inferred Dependencies\n  \"apiCall\" -> \"apiConfig\" [label=\"reads url\", style=dashed, color=blue];\n}",
  "svgHash": "872fc852332e19bfc5cffe8dcefff0d6953158205226beeb64cfcf200ed039c7"
}