{
  "json": {
    "title": "Generic Types",
    "attributes": [],
    "nodes": [
      {
        "name": "types",
        "type": "context",
        "attributes": [
          {
            "name": "names",
            "type": "Array<string>",
            "value": []
          },
          {
            "name": "counts",
            "type": "Array<number>",
            "value": []
          },
          {
            "name": "matrix",
            "type": "Array<Array<number>>",
            "value": [
              [
                1,
                2
              ],
              [
                3,
                4
              ]
            ]
          },
          {
            "name": "mapping",
            "type": "Map<string, Array<number>>",
            "value": "#complexMap"
          },
          {
            "name": "asyncResult",
            "type": "Promise<Response>",
            "value": "#pending"
          },
          {
            "name": "futureData",
            "type": "Promise<Array<Data>>",
            "value": "#loading"
          },
          {
            "name": "maybeValue",
            "type": "Optional<string>",
            "value": "#none"
          },
          {
            "name": "possibleResult",
            "type": "Optional<Result>",
            "value": "#some"
          },
          {
            "name": "workflow",
            "type": "StateMachine<State>",
            "value": "#workflowDef"
          },
          {
            "name": "tasks",
            "type": "Queue<Task>",
            "value": "#taskQueue"
          }
        ]
      }
    ],
    "edges": [],
    "notes": [],
    "inferredDependencies": []
  },
  "graphviz": "digraph {\n  // Graph attributes\n  label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"center\"><font point-size=\"12\"><b>Generic Types</b></font></td></tr></table>>;\n  labelloc=\"t\";\n  fontsize=10;\n  fontname=\"Arial\";\n  compound=true;\n  rankdir=TB;\n  pad=0.25;\n  node [fontname=\"Arial\", fontsize=10];\n  edge [fontname=\"Arial\", fontsize=9];\n\n  // Node definitions with nested namespaces\n  \"types\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>types</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"names__key\" align=\"left\" balign=\"left\">names : Array&lt;string&gt;</td><td port=\"names__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"counts__key\" align=\"left\" balign=\"left\">counts : Array&lt;number&gt;</td><td port=\"counts__value\" align=\"left\" balign=\"left\">[]</td></tr><tr><td port=\"matrix__key\" align=\"left\" balign=\"left\">matrix : Array&lt;Array&lt;number&gt;&gt;</td><td port=\"matrix__value\" align=\"left\" balign=\"left\">[<br align=\"left\"/>  [<br align=\"left\"/>    1,<br align=\"left\"/>    2<br align=\"left\"/>  ],<br align=\"left\"/>  [<br align=\"left\"/>    3,<br align=\"left\"/>    4<br align=\"left\"/>  ]<br align=\"left\"/>]</td></tr><tr><td port=\"mapping__key\" align=\"left\" balign=\"left\">mapping : Map&lt;string, Array&lt;number&gt;&gt;</td><td port=\"mapping__value\" align=\"left\" balign=\"left\">#complexMap</td></tr><tr><td port=\"asyncResult__key\" align=\"left\" balign=\"left\">asyncResult : Promise&lt;Response&gt;</td><td port=\"asyncResult__value\" align=\"left\" balign=\"left\">#pending</td></tr><tr><td port=\"futureData__key\" align=\"left\" balign=\"left\">futureData : Promise&lt;Array&lt;Data&gt;&gt;</td><td port=\"futureData__value\" align=\"left\" balign=\"left\">#loading</td></tr><tr><td port=\"maybeValue__key\" align=\"left\" balign=\"left\">maybeValue : Optional&lt;string&gt;</td><td port=\"maybeValue__value\" align=\"left\" balign=\"left\">#none</td></tr><tr><td port=\"possibleResult__key\" align=\"left\" balign=\"left\">possibleResult : Optional&lt;Result&gt;</td><td port=\"possibleResult__value\" align=\"left\" balign=\"left\">#some</td></tr><tr><td port=\"workflow__key\" align=\"left\" balign=\"left\">workflow : StateMachine&lt;State&gt;</td><td port=\"workflow__value\" align=\"left\" balign=\"left\">#workflowDef</td></tr><tr><td port=\"tasks__key\" align=\"left\" balign=\"left\">tasks : Queue&lt;Task&gt;</td><td port=\"tasks__value\" align=\"left\" balign=\"left\">#taskQueue</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 7 issues</b><br/>Type mismatch: expected Map&lt;string, Array&lt;number&gt;&gt;...<br/>Type mismatch: expected Promise&lt;Response&gt;, got str...<br/><i>... and 5 more</i></font></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\", penwidth=3, color=\"#D32F2F\"];\n\n\n  // Validation Warnings\n  \"warning_types_0\" [label=<ðŸ”´ Type mismatch: expected Map&lt;string,<br/>Array&lt;number&gt;&gt;, got string. Expected<br/>object, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_0\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_1\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Response&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_1\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_2\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Array&lt;Data&gt;&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_2\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_3\" [label=<ðŸ”´ Type mismatch: expected<br/>Optional&lt;string&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_3\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_4\" [label=<ðŸ”´ Type mismatch: expected<br/>Optional&lt;Result&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_4\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_5\" [label=<ðŸ”´ Type mismatch: expected<br/>StateMachine&lt;State&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_5\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_types_6\" [label=<ðŸ”´ Type mismatch: expected Queue&lt;Task&gt;,<br/>got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_types_6\" -> \"types\" [style=dashed, color=\"#999999\", arrowhead=none];\n}",
  "svgHash": "d3f152a2766288381ae79589e5436184dfda6dab63afd07ab6226261736fa775"
}