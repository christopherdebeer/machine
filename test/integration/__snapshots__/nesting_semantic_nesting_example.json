{
  "json": {
    "title": "Semantic Nesting Example",
    "attributes": [],
    "nodes": [
      {
        "name": "globalConfig",
        "type": "context",
        "attributes": [
          {
            "name": "apiEndpoint",
            "value": "https://api.example.com"
          },
          {
            "name": "timeout",
            "value": 5000
          },
          {
            "name": "retryCount",
            "value": 3
          }
        ]
      },
      {
        "name": "DataPipeline",
        "type": "task",
        "attributes": [],
        "title": "Data Processing Pipeline"
      },
      {
        "name": "pipelineState",
        "type": "context",
        "attributes": [
          {
            "name": "recordsProcessed",
            "value": 0
          },
          {
            "name": "errors",
            "value": 0
          },
          {
            "name": "status",
            "value": "initializing"
          }
        ],
        "parent": "DataPipeline"
      },
      {
        "name": "ValidationPhase",
        "type": "task",
        "attributes": [],
        "parent": "DataPipeline",
        "title": "Data Validation"
      },
      {
        "name": "fetchData",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Fetch data from the API endpoint specified in globalConfig"
          }
        ],
        "parent": "ValidationPhase"
      },
      {
        "name": "validateSchema",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Validate the data schema"
          }
        ],
        "parent": "ValidationPhase"
      },
      {
        "name": "checkQuality",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Check data quality metrics"
          }
        ],
        "parent": "ValidationPhase"
      },
      {
        "name": "ProcessingPhase",
        "type": "task",
        "attributes": [],
        "parent": "DataPipeline",
        "title": "Data Transformation"
      },
      {
        "name": "transform",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Transform the validated data"
          }
        ],
        "parent": "ProcessingPhase"
      },
      {
        "name": "enrich",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Enrich data with additional information"
          }
        ],
        "parent": "ProcessingPhase"
      },
      {
        "name": "aggregate",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Aggregate processed data"
          }
        ],
        "parent": "ProcessingPhase"
      },
      {
        "name": "StoragePhase",
        "type": "task",
        "attributes": [],
        "parent": "DataPipeline",
        "title": "Data Storage"
      },
      {
        "name": "storageConfig",
        "type": "context",
        "attributes": [
          {
            "name": "database",
            "value": "primary"
          },
          {
            "name": "batchSize",
            "value": 100
          }
        ],
        "parent": "StoragePhase"
      },
      {
        "name": "prepareData",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Prepare data for storage"
          }
        ],
        "parent": "StoragePhase"
      },
      {
        "name": "writeData",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Write data to storage"
          }
        ],
        "parent": "StoragePhase"
      },
      {
        "name": "verifyStorage",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Verify data was stored correctly"
          }
        ],
        "parent": "StoragePhase"
      },
      {
        "name": "start",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Initialize the data pipeline"
          }
        ]
      },
      {
        "name": "end",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Finalize and report results"
          }
        ]
      },
      {
        "name": "handleError",
        "type": "task",
        "attributes": [
          {
            "name": "prompt",
            "value": "Handle any errors that occurred during pipeline execution"
          }
        ]
      }
    ],
    "edges": [
      {
        "source": "start",
        "target": "fetchData",
        "arrowType": "->"
      },
      {
        "source": "fetchData",
        "target": "validateSchema",
        "arrowType": "->"
      },
      {
        "source": "validateSchema",
        "target": "checkQuality",
        "arrowType": "->"
      },
      {
        "source": "checkQuality",
        "target": "transform",
        "arrowType": "->"
      },
      {
        "source": "transform",
        "target": "enrich",
        "arrowType": "->"
      },
      {
        "source": "enrich",
        "target": "aggregate",
        "arrowType": "->"
      },
      {
        "source": "aggregate",
        "target": "prepareData",
        "arrowType": "->"
      },
      {
        "source": "prepareData",
        "target": "writeData",
        "arrowType": "->"
      },
      {
        "source": "writeData",
        "target": "verifyStorage",
        "arrowType": "->"
      },
      {
        "source": "verifyStorage",
        "target": "end",
        "arrowType": "->"
      },
      {
        "source": "DataPipeline",
        "target": "globalConfig",
        "arrowType": "->",
        "value": {
          "text": "reads"
        },
        "attributes": {
          "text": "reads"
        }
      },
      {
        "source": "DataPipeline",
        "target": "pipelineState",
        "arrowType": "->",
        "value": {
          "text": "writes"
        },
        "attributes": {
          "text": "writes"
        }
      },
      {
        "source": "transform",
        "target": "pipelineState",
        "arrowType": "->",
        "value": {
          "text": "writes"
        },
        "attributes": {
          "text": "writes"
        }
      },
      {
        "source": "writeData",
        "target": "pipelineState",
        "arrowType": "->",
        "value": {
          "text": "writes"
        },
        "attributes": {
          "text": "writes"
        }
      },
      {
        "source": "validateSchema",
        "target": "handleError",
        "arrowType": "->",
        "value": {
          "text": "error"
        },
        "attributes": {
          "text": "error"
        }
      },
      {
        "source": "transform",
        "target": "handleError",
        "arrowType": "->",
        "value": {
          "text": "error"
        },
        "attributes": {
          "text": "error"
        }
      },
      {
        "source": "writeData",
        "target": "handleError",
        "arrowType": "->",
        "value": {
          "text": "error"
        },
        "attributes": {
          "text": "error"
        }
      }
    ],
    "notes": [
      {
        "target": "DataPipeline",
        "content": "This pipeline demonstrates semantic nesting with qualified names and context inheritance. Child tasks automatically inherit read-only access to parent context nodes.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "fetchData",
        "content": "This task inherits read access to globalConfig (from DataPipeline) and pipelineState (from DataPipeline) without explicit edges.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "prepareData",
        "content": "This task inherits access to globalConfig and pipelineState from ancestors, plus storageConfig from its direct parent.",
        "annotations": [],
        "attributes": []
      }
    ],
    "inferredDependencies": []
  },
  "graphviz": "digraph {\n  // Graph attributes\n  label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"center\"><font point-size=\"12\"><b>Semantic Nesting Example</b></font></td></tr></table>>;\n  labelloc=\"t\";\n  fontsize=10;\n  fontname=\"Arial\";\n  compound=true;\n  rankdir=TB;\n  pad=0.25;\n  node [fontname=\"Arial\", fontsize=10];\n  edge [fontname=\"Arial\", fontsize=9];\n\n  // Node definitions with nested namespaces\n  \"globalConfig\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>globalConfig</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"apiEndpoint__key\" align=\"left\" balign=\"left\">apiEndpoint</td><td port=\"apiEndpoint__value\" align=\"left\" balign=\"left\">https://api.example.com</td></tr><tr><td port=\"timeout__key\" align=\"left\" balign=\"left\">timeout</td><td port=\"timeout__value\" align=\"left\" balign=\"left\">5000</td></tr><tr><td port=\"retryCount__key\" align=\"left\" balign=\"left\">retryCount</td><td port=\"retryCount__value\" align=\"left\" balign=\"left\">3</td></tr></table></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\"];\n  subgraph cluster_DataPipeline {\n    label=\"\";\n    style=filled;\n    fontsize=10;\n    fillcolor=\"#FFFFFF\";\n    color=\"#999999\";\n    \"DataPipeline\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\" port=\"cluster_header\"><b>DataPipeline</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\"><b>Data Processing Pipeline</b><i></i></td></tr></table>>, shape=plain, margin=0];\n    \"DataPipeline__cluster_anchor\" [shape=point, width=0.01, height=0.01, label=\"\", style=invis, fixedsize=true];\n\n    \"pipelineState\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>pipelineState</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"recordsProcessed__key\" align=\"left\" balign=\"left\">recordsProcessed</td><td port=\"recordsProcessed__value\" align=\"left\" balign=\"left\">0</td></tr><tr><td port=\"errors__key\" align=\"left\" balign=\"left\">errors</td><td port=\"errors__value\" align=\"left\" balign=\"left\">0</td></tr><tr><td port=\"status__key\" align=\"left\" balign=\"left\">status</td><td port=\"status__value\" align=\"left\" balign=\"left\">initializing</td></tr></table></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\"];\n    subgraph cluster_ValidationPhase {\n      label=\"\";\n      style=filled;\n      fontsize=10;\n      fillcolor=\"#FFFFFF\";\n      color=\"#999999\";\n      \"ValidationPhase\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\" port=\"cluster_header\"><b>ValidationPhase</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\"><b>Data Validation</b><i></i></td></tr></table>>, shape=plain, margin=0];\n      \"ValidationPhase__cluster_anchor\" [shape=point, width=0.01, height=0.01, label=\"\", style=invis, fixedsize=true];\n\n      \"fetchData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>fetchData</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Fetch data from the API endpoint<br/>specified in globalConfig</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"validateSchema\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>validateSchema</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Validate the data schema</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"checkQuality\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>checkQuality</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Check data quality metrics</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n    }\n    subgraph cluster_ProcessingPhase {\n      label=\"\";\n      style=filled;\n      fontsize=10;\n      fillcolor=\"#FFFFFF\";\n      color=\"#999999\";\n      \"ProcessingPhase\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\" port=\"cluster_header\"><b>ProcessingPhase</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\"><b>Data Transformation</b><i></i></td></tr></table>>, shape=plain, margin=0];\n      \"ProcessingPhase__cluster_anchor\" [shape=point, width=0.01, height=0.01, label=\"\", style=invis, fixedsize=true];\n\n      \"transform\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>transform</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Transform the validated data</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"enrich\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>enrich</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Enrich data with additional information</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"aggregate\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>aggregate</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Aggregate processed data</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n    }\n    subgraph cluster_StoragePhase {\n      label=\"\";\n      style=filled;\n      fontsize=10;\n      fillcolor=\"#FFFFFF\";\n      color=\"#999999\";\n      \"StoragePhase\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\" port=\"cluster_header\"><b>StoragePhase</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\"><b>Data Storage</b><i></i></td></tr></table>>, shape=plain, margin=0];\n      \"StoragePhase__cluster_anchor\" [shape=point, width=0.01, height=0.01, label=\"\", style=invis, fixedsize=true];\n\n      \"storageConfig\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>storageConfig</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"database__key\" align=\"left\" balign=\"left\">database</td><td port=\"database__value\" align=\"left\" balign=\"left\">primary</td></tr><tr><td port=\"batchSize__key\" align=\"left\" balign=\"left\">batchSize</td><td port=\"batchSize__value\" align=\"left\" balign=\"left\">100</td></tr></table></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\"];\n      \"prepareData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>prepareData</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Prepare data for storage</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"writeData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>writeData</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Write data to storage</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n      \"verifyStorage\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>verifyStorage</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Verify data was stored correctly</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n    }\n  }\n  \"start\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>start</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Initialize the data pipeline</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n  \"end\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>end</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Finalize and report results</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n  \"handleError\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>handleError</b> <i>&lt;task&gt;</i></td></tr><tr><td align=\"left\">Handle any errors that occurred during<br/>pipeline execution</td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\"];\n\n  // Edges\n  \"start\" -> \"fetchData\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"fetchData\" -> \"validateSchema\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"validateSchema\" -> \"checkQuality\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"checkQuality\" -> \"transform\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"transform\" -> \"enrich\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"enrich\" -> \"aggregate\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"aggregate\" -> \"prepareData\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"prepareData\" -> \"writeData\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"writeData\" -> \"verifyStorage\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"verifyStorage\" -> \"end\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"DataPipeline__cluster_anchor\" -> \"globalConfig\" [label=\"reads\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\", ltail=\"cluster_DataPipeline\"];\n  \"DataPipeline__cluster_anchor\" -> \"pipelineState\" [label=\"writes\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\", ltail=\"cluster_DataPipeline\"];\n  \"transform\" -> \"pipelineState\" [label=\"writes\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"writeData\" -> \"pipelineState\" [label=\"writes\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"validateSchema\" -> \"handleError\" [label=\"error\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"transform\" -> \"handleError\" [label=\"error\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"writeData\" -> \"handleError\" [label=\"error\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n\n  // Notes\n  \"note_0_DataPipeline\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">This pipeline demonstrates semantic<br/>nesting with qualified names and context<br/>inheritance. Child tasks automatically<br/>inherit read-only access to parent<br/>context nodes.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_0_DataPipeline\" -> \"DataPipeline\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_1_fetchData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">This task inherits read access to<br/>globalConfig (from DataPipeline) and<br/>pipelineState (from DataPipeline)<br/>without explicit edges.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_1_fetchData\" -> \"fetchData\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_2_prepareData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">This task inherits access to<br/>globalConfig and pipelineState from<br/>ancestors, plus storageConfig from its<br/>direct parent.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_2_prepareData\" -> \"prepareData\" [style=dashed, color=\"#999999\", arrowhead=none];\n}",
  "svgHash": "796c5dc83f91f65771d7addeea245612e3e2032c593207fe5cbba5b776928f46"
}