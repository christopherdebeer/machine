{
  "json": {
    "title": "Advanced Syntax Complete Demo",
    "attributes": [],
    "nodes": [
      {
        "name": "apiConfig",
        "type": "context",
        "attributes": [
          {
            "name": "endpoint",
            "type": "string",
            "value": "https://api.example.com"
          },
          {
            "name": "headers",
            "type": "Map<string, string>",
            "value": [
              "auth",
              "Bearer token"
            ]
          },
          {
            "name": "retries",
            "type": "number",
            "value": 3
          }
        ],
        "annotations": [
          {
            "name": "Singleton"
          }
        ]
      },
      {
        "name": "BaseTask",
        "type": "task",
        "attributes": [
          {
            "name": "result",
            "type": "Promise<any>",
            "value": "pending"
          },
          {
            "name": "status",
            "type": "string",
            "value": "initialized"
          }
        ],
        "annotations": [
          {
            "name": "Abstract"
          }
        ]
      },
      {
        "name": "FetchTask",
        "type": "task",
        "attributes": [
          {
            "name": "data",
            "type": "Promise<Response>",
            "value": "pending"
          }
        ],
        "annotations": [
          {
            "name": "Async"
          }
        ]
      },
      {
        "name": "TransformTask",
        "type": "task",
        "attributes": [
          {
            "name": "output",
            "type": "Array<Record>",
            "value": []
          }
        ]
      },
      {
        "name": "Success",
        "type": "state",
        "attributes": [
          {
            "name": "data",
            "type": "Optional<Array<Record>>",
            "value": "none"
          }
        ]
      },
      {
        "name": "Error",
        "type": "state",
        "attributes": [
          {
            "name": "error",
            "type": "Optional<string>",
            "value": "none"
          }
        ]
      },
      {
        "name": "FetchTask",
        "attributes": []
      }
    ],
    "edges": [
      {
        "source": "BaseTask",
        "target": "FetchTask",
        "arrowType": "<|--"
      },
      {
        "source": "BaseTask",
        "target": "TransformTask",
        "arrowType": "<|--"
      },
      {
        "source": "FetchTask",
        "target": "TransformTask",
        "arrowType": "->",
        "sourceMultiplicity": "1",
        "value": {
          "on": "success"
        },
        "attributes": {
          "on": "success"
        }
      },
      {
        "source": "FetchTask",
        "target": "Error",
        "arrowType": "->",
        "sourceMultiplicity": "1",
        "value": {
          "on": "error"
        },
        "attributes": {
          "on": "error"
        }
      },
      {
        "source": "FetchTask",
        "target": "FetchTask",
        "arrowType": "->",
        "sourceMultiplicity": "1",
        "value": {
          "timeout": "5000"
        },
        "attributes": {
          "timeout": "5000"
        }
      },
      {
        "source": "TransformTask",
        "target": "Success",
        "arrowType": "-->",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "1"
      },
      {
        "source": "TransformTask",
        "target": "Error",
        "arrowType": "-->",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "0..1"
      }
    ],
    "notes": [
      {
        "target": "apiConfig",
        "content": "Singleton configuration for API access. Contains endpoint, headers, and retry policy.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "FetchTask",
        "content": "Asynchronous task that fetches data from external API. Returns Promise<Response> which resolves to the HTTP response. Includes automatic retry logic with exponential backoff.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "TransformTask",
        "content": "Transforms the raw API response into a typed array of records. Handles schema validation, type coercion, and error reporting.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "Success",
        "content": "Indicates successful completion. Contains the transformed data as Optional<Array<Record>>.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "Error",
        "content": "Error state with optional error message. Captured from API failures or transformation errors.",
        "annotations": [],
        "attributes": []
      }
    ],
    "inferredDependencies": []
  },
  "graphviz": "digraph {\n  // Graph attributes\n  label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"center\"><font point-size=\"12\"><b>Advanced Syntax Complete Demo</b></font></td></tr></table>>;\n  labelloc=\"t\";\n  fontsize=10;\n  fontname=\"Arial\";\n  compound=true;\n  rankdir=TB;\n  pad=0.25;\n  node [fontname=\"Arial\", fontsize=10];\n  edge [fontname=\"Arial\", fontsize=9];\n\n  // Node definitions with nested namespaces\n  \"apiConfig\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>apiConfig</b> <i>&lt;context&gt;</i> <i>@Singleton</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"endpoint__key\" align=\"left\" balign=\"left\">endpoint : string</td><td port=\"endpoint__value\" align=\"left\" balign=\"left\">https://api.example.com</td></tr><tr><td port=\"headers__key\" align=\"left\" balign=\"left\">headers : Map&lt;string, string&gt;</td><td port=\"headers__value\" align=\"left\" balign=\"left\">[\n  &quot;auth&quot;,\n  &quot;Bearer token&quot;\n]</td></tr><tr><td port=\"retries__key\" align=\"left\" balign=\"left\">retries : number</td><td port=\"retries__value\" align=\"left\" balign=\"left\">3</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Map&lt;string, string&gt;, got A...<br/></font></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\", peripheries=2, penwidth=3, color=\"#D32F2F\"];\n  \"BaseTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>BaseTask</b> <i>&lt;task&gt;</i> <i>@Abstract</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"result__key\" align=\"left\" balign=\"left\">result : Promise&lt;any&gt;</td><td port=\"result__value\" align=\"left\" balign=\"left\">pending</td></tr><tr><td port=\"status__key\" align=\"left\" balign=\"left\">status : string</td><td port=\"status__value\" align=\"left\" balign=\"left\">initialized</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Promise&lt;any&gt;, got string<br/></font></td></tr></table>>, shape=egg, fillcolor=\"#E3F2FD\", style=\"filled,dashed\", color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"FetchTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>FetchTask</b> <i>&lt;task&gt;</i> <i>@Async</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"data__key\" align=\"left\" balign=\"left\">data : Promise&lt;Response&gt;</td><td port=\"data__value\" align=\"left\" balign=\"left\">pending</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Promise&lt;Response&gt;, got str...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"TransformTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>TransformTask</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"output__key\" align=\"left\" balign=\"left\">output : Array&lt;Record&gt;</td><td port=\"output__value\" align=\"left\" balign=\"left\">[]</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Array&lt;Record&gt;, got Array&lt;R...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"Success\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>Success</b> <i>&lt;state&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"data__key\" align=\"left\" balign=\"left\">data : Optional&lt;Array&lt;Record&gt;&gt;</td><td port=\"data__value\" align=\"left\" balign=\"left\">none</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Optional&lt;Array&lt;Record&gt;&gt;, g...<br/></font></td></tr></table>>, shape=diamond, fillcolor=\"#F3E5F5\", style=filled, color=\"#7B1FA2\", penwidth=3, color=\"#D32F2F\"];\n  \"Error\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>Error</b> <i>&lt;state&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"error__key\" align=\"left\" balign=\"left\">error : Optional&lt;string&gt;</td><td port=\"error__value\" align=\"left\" balign=\"left\">none</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Optional&lt;string&gt;, got stri...<br/></font></td></tr></table>>, shape=diamond, fillcolor=\"#F3E5F5\", style=filled, color=\"#7B1FA2\", penwidth=3, color=\"#D32F2F\"];\n  \"FetchTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>FetchTask</b></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Promise&lt;Response&gt;, got str...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#FFFFFF\", style=filled, color=\"#000000\"];\n\n  // Edges\n  \"BaseTask\" -> \"FetchTask\" [arrowhead=empty, dir=back, labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"BaseTask\" -> \"TransformTask\" [arrowhead=empty, dir=back, labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"FetchTask\" -> \"TransformTask\" [label=\"on=success\", taillabel=\"1\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"FetchTask\" -> \"Error\" [label=\"on=error\", taillabel=\"1\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"FetchTask\" -> \"FetchTask\" [label=\"timeout=5000\", taillabel=\"1\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"TransformTask\" -> \"Success\" [taillabel=\"1\", headlabel=\"1\", style=\"dashed\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"TransformTask\" -> \"Error\" [taillabel=\"1\", headlabel=\"0..1\", style=\"dashed\", labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n\n  // Notes\n  \"note_0_apiConfig\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Singleton configuration for API access.<br/>Contains endpoint, headers, and retry<br/>policy.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_0_apiConfig\" -> \"apiConfig\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_1_FetchTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Asynchronous task that fetches data from<br/>external API. Returns Promise&lt;Response&gt;<br/>which resolves to the HTTP response.<br/>Includes automatic retry logic with<br/>exponential backoff.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_1_FetchTask\" -> \"FetchTask\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_2_TransformTask\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Transforms the raw API response into a<br/>typed array of records. Handles schema<br/>validation, type coercion, and error<br/>reporting.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_2_TransformTask\" -> \"TransformTask\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_3_Success\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Indicates successful completion.<br/>Contains the transformed data as<br/>Optional&lt;Array&lt;Record&gt;&gt;.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_3_Success\" -> \"Success\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_4_Error\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Error state with optional error message.<br/>Captured from API failures or<br/>transformation errors.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_4_Error\" -> \"Error\" [style=dashed, color=\"#999999\", arrowhead=none];\n\n  // Validation Warnings\n  \"warning_apiConfig_0\" [label=<ðŸ”´ Type mismatch: expected Map&lt;string,<br/>string&gt;, got Array&lt;any&gt;. Expected<br/>object, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_apiConfig_0\" -> \"apiConfig\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_BaseTask_0\" [label=<ðŸ”´ Type mismatch: expected Promise&lt;any&gt;,<br/>got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_BaseTask_0\" -> \"BaseTask\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_FetchTask_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Response&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_FetchTask_0\" -> \"FetchTask\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_TransformTask_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Array&lt;Record&gt;, got Array&lt;Record&gt;.<br/>Expected array, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_TransformTask_0\" -> \"TransformTask\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_Success_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Optional&lt;Array&lt;Record&gt;&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_Success_0\" -> \"Success\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_Error_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Optional&lt;string&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_Error_0\" -> \"Error\" [style=dashed, color=\"#999999\", arrowhead=none];\n}",
  "svgHash": "6e10bc5cc0d6e50271f521ce9fb6eacceca9a1b75638e3e46d135879c896936d"
}