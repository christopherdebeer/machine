{
  "json": {
    "title": "Phase 3: Notes and Generic Types",
    "attributes": [],
    "nodes": [
      {
        "name": "config",
        "type": "context",
        "attributes": [
          {
            "name": "items",
            "type": "List<string>",
            "value": [
              "item1",
              "item2"
            ]
          },
          {
            "name": "result",
            "type": "Promise<Result>",
            "value": "pending"
          }
        ]
      },
      {
        "name": "fetchData",
        "type": "task",
        "attributes": [
          {
            "name": "response",
            "type": "Promise<Response>",
            "value": "pending"
          },
          {
            "name": "timeout",
            "type": "number",
            "value": 5000
          }
        ],
        "annotations": [
          {
            "name": "Async"
          }
        ]
      },
      {
        "name": "processData",
        "type": "task",
        "attributes": [
          {
            "name": "data",
            "type": "Array<Record>",
            "value": []
          }
        ]
      },
      {
        "name": "complete",
        "type": "state",
        "attributes": [
          {
            "name": "message",
            "type": "string",
            "value": "All done"
          }
        ]
      }
    ],
    "edges": [
      {
        "source": "fetchData",
        "target": "processData",
        "arrowType": "->"
      },
      {
        "source": "processData",
        "target": "complete",
        "arrowType": "->"
      }
    ],
    "notes": [
      {
        "target": "fetchData",
        "content": "Fetches data from external API. Returns Promise<Response> with the fetched data.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "processData",
        "content": "Processes the fetched data and transforms it into Array<Record> format.",
        "annotations": [],
        "attributes": []
      },
      {
        "target": "complete",
        "content": "Final state indicating successful completion of the workflow.",
        "annotations": [],
        "attributes": []
      }
    ],
    "inferredDependencies": []
  },
  "graphviz": "digraph {\n  // Graph attributes\n  label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"center\"><font point-size=\"12\"><b>Phase 3: Notes and Generic Types</b></font></td></tr></table>>;\n  labelloc=\"t\";\n  fontsize=10;\n  fontname=\"Arial\";\n  compound=true;\n  rankdir=TB;\n  pad=0.25;\n  node [fontname=\"Arial\", fontsize=10];\n  edge [fontname=\"Arial\", fontsize=9];\n\n  // Node definitions with nested namespaces\n  \"config\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>config</b> <i>&lt;context&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"items__key\" align=\"left\" balign=\"left\">items : List&lt;string&gt;</td><td port=\"items__value\" align=\"left\" balign=\"left\">[\n  &quot;item1&quot;,\n  &quot;item2&quot;\n]</td></tr><tr><td port=\"result__key\" align=\"left\" balign=\"left\">result : Promise&lt;Result&gt;</td><td port=\"result__value\" align=\"left\" balign=\"left\">pending</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 2 issues</b><br/>Type mismatch: expected List&lt;string&gt;, got Array&lt;an...<br/>Type mismatch: expected Promise&lt;Result&gt;, got strin...<br/></font></td></tr></table>>, shape=folder, fillcolor=\"#E8F5E9\", style=filled, color=\"#388E3C\", penwidth=3, color=\"#D32F2F\"];\n  \"fetchData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>fetchData</b> <i>&lt;task&gt;</i> <i>@Async</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"response__key\" align=\"left\" balign=\"left\">response : Promise&lt;Response&gt;</td><td port=\"response__value\" align=\"left\" balign=\"left\">pending</td></tr><tr><td port=\"timeout__key\" align=\"left\" balign=\"left\">timeout : number</td><td port=\"timeout__value\" align=\"left\" balign=\"left\">5000</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Promise&lt;Response&gt;, got str...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"processData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>processData</b> <i>&lt;task&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"data__key\" align=\"left\" balign=\"left\">data : Array&lt;Record&gt;</td><td port=\"data__value\" align=\"left\" balign=\"left\">[]</td></tr></table></td></tr><tr><td align=\"left\" bgcolor=\"#FFCCCC\"><font point-size=\"8\"><b>ðŸ”´ 1 issue</b><br/>Type mismatch: expected Array&lt;Record&gt;, got Array&lt;R...<br/></font></td></tr></table>>, shape=box, fillcolor=\"#E3F2FD\", style=filled, color=\"#1976D2\", penwidth=3, color=\"#D32F2F\"];\n  \"complete\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\"><b>complete</b> <i>&lt;state&gt;</i></td></tr><tr><td><table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"2\" align=\"left\"><tr><td port=\"message__key\" align=\"left\" balign=\"left\">message : string</td><td port=\"message__value\" align=\"left\" balign=\"left\">All done</td></tr></table></td></tr></table>>, shape=diamond, fillcolor=\"#F3E5F5\", style=filled, color=\"#7B1FA2\"];\n\n  // Edges\n  \"fetchData\" -> \"processData\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n  \"processData\" -> \"complete\" [labelOverlay=\"75%\", labelhref=\"#srcLineTBD\"];\n\n  // Notes\n  \"note_0_fetchData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Fetches data from external API. Returns<br/>Promise&lt;Response&gt; with the fetched data.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_0_fetchData\" -> \"fetchData\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_1_processData\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Processes the fetched data and<br/>transforms it into Array&lt;Record&gt; format.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_1_processData\" -> \"processData\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"note_2_complete\" [label=<<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"4\"><tr><td align=\"left\">Final state indicating successful<br/>completion of the workflow.</td></tr></table>>, shape=note, fillcolor=\"#FFFACD\", style=filled, fontsize=9];\n  \"note_2_complete\" -> \"complete\" [style=dashed, color=\"#999999\", arrowhead=none];\n\n  // Validation Warnings\n  \"warning_config_0\" [label=<ðŸ”´ Type mismatch: expected List&lt;string&gt;,<br/>got Array&lt;any&gt;. Expected array, received<br/>string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_config_0\" -> \"config\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_config_1\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Result&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_config_1\" -> \"config\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_fetchData_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Promise&lt;Response&gt;, got string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_fetchData_0\" -> \"fetchData\" [style=dashed, color=\"#999999\", arrowhead=none];\n  \"warning_processData_0\" [label=<ðŸ”´ Type mismatch: expected<br/>Array&lt;Record&gt;, got Array&lt;Record&gt;.<br/>Expected array, received string>, shape=note, fillcolor=\"#FFCCCC\", style=filled, fontsize=9];\n  \"warning_processData_0\" -> \"processData\" [style=dashed, color=\"#999999\", arrowhead=none];\n}",
  "svgHash": "171eacde6cd192414e9f8a790c69a3973fe903159312e5349192b5c0d6a7cada"
}