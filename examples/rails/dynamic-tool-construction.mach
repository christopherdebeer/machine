machine "Dynamic Tool Construction Demo"

// This example demonstrates how an agent can construct tools
// dynamically when they don't exist in the codebase.

// Context nodes
context input {
    text<string>: "Sample text for analysis";
    language<string>: "en";
};

context output {
    results<string>: "{}";
};

context toolRegistry {
    customTools<string>: "[]";
};

// State machine
State idle;
State complete;

// Task with meta-programming enabled
Task analyze {
    meta: true;
    prompt: "Analyze the input text. If no analysis tool exists, construct one using construct_tool.";
};

// Flow
idle -> analyze;

analyze -reads-> input;
analyze -writes-> output;
analyze -writes-> toolRegistry;  // Can register new tools

analyze -> complete;

complete -> idle;

// Expected agent behavior:
// 1. Agent receives prompt to analyze text
// 2. Agent checks available tools via list_available_tools
// 3. No analysis tool exists
// 4. Agent uses construct_tool:
//    {
//      name: "analyze_sentiment",
//      description: "Analyze text sentiment",
//      input_schema: {
//        type: "object",
//        properties: {
//          text: { type: "string" }
//        }
//      },
//      implementation_strategy: "agent_backed",
//      implementation_details: "Analyze sentiment as positive/negative/neutral..."
//    }
// 5. Tool is registered and immediately available
// 6. Agent uses new analyze_sentiment tool
// 7. Agent writes results to output context
// 8. Agent transitions to complete
