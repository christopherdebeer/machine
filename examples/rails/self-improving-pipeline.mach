machine "Self-Improving Data Pipeline"

// This is the complete example from the Rails-Based Architecture docs
// demonstrating meta-programming with tool construction and improvement.

// Context nodes
context input {
    data<string>: "[]";
    format<string>: "json";
};

context output {
    processed<string>: "[]";
    metrics<string>: "{}";
};

context toolRegistry {
    customTools<string>: "[]";
};

// State machine
State idle;
State processing;
State optimizing;
State complete;

// Tasks
Task ingest {
    prompt: "Load data from input context";
};

Task process {
    meta: true;
    prompt: "Process the data. If no suitable tool exists, construct one.";
};

Task optimize {
    meta: true;
    prompt: "Review the tools used. Can they be improved?";
};

// Flow with mixed automatic and agent-controlled transitions
idle -> ingest;                           // Start with ingest

ingest -reads-> input;                    // Permission: can read input
ingest -> process;                        // Agent decides when ready

process -reads-> input;                   // Can read input
process -writes-> output;                 // Can write output
process -writes-> toolRegistry;           // Can construct tools
process -> optimizing, complete;          // Agent decides: optimize or finish?

optimizing -reads-> toolRegistry;         // Can review tools
optimizing -reads-> output;               // Can see results
optimizing -writes-> toolRegistry;        // Can improve tools
optimizing -> complete, process;          // Agent: complete or retry with improved tools

complete -> idle;                         // Loop back

// Expected execution flow:
//
// 1. idle → ingest: Automatic (state node + @auto)
//
// 2. ingest:
//    - Agent receives system prompt with context about input
//    - Has tools: read_input, transition_to_process
//    - Loads data, chooses transition to process
//
// 3. ingest → process: Agent-controlled
//
// 4. process (first time):
//    - Agent receives prompt: "Process the data. If no suitable tool exists, construct one."
//    - Has tools: read_input, write_output, write_toolRegistry, construct_tool, transition_to_optimizing, transition_to_complete
//    - Realizes no processing tool exists
//    - Uses construct_tool to create analyze_sentiment tool
//    - Uses new tool to process data
//    - Stores results in output
//    - Decides to transition to optimizing
//
// 5. optimizing (first time):
//    - Agent reviews analyze_sentiment tool
//    - Sees it could be more efficient
//    - Uses propose_tool_improvement to suggest optimization
//    - Checks metrics.quality = 0.85 (< 0.9)
//    - Decides to transition back to process to try improved version
//
// 6. process (second time):
//    - Uses improved analyze_sentiment tool
//    - Quality improves to 0.92
//    - Transitions to optimizing
//
// 7. optimizing (second time):
//    - Condition metrics.quality > 0.9 is true
//    - Automatic transition to complete
//
// 8. complete → idle: Automatic (state node + @auto)
