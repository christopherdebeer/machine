machine "Code Generation Workflow"

// Define the workflow for generating, testing, and documenting code

state start;

Task define_requirements {
    meta: true;
    prompt: "You are generating a simple JavaScript utility function. Create requirements for a function that validates email addresses. Use set_context_value to store the requirements in the 'requirements' context node with key 'spec' as a string describing: function name, parameters, return value, and test cases.";
};

context requirements {
    spec<string>: "";
};

Task generate_code {
    meta: true;
    prompt: "Read the requirements from the 'requirements' context using get_context_value. Generate JavaScript code for the email validation function. Use set_context_value to store the generated code in the 'code' context node with key 'implementation' as a string containing the complete function implementation.";
};

context code {
    implementation<string>: "";
    language<string>: "javascript";
};

Task generate_tests {
    meta: true;
    prompt: "Read the requirements from 'requirements' context and the implementation from 'code' context using get_context_value. Generate comprehensive test cases using a simple testing approach (no framework needed). Use set_context_value to store the test code in the 'tests' context node with key 'testCode' as a string.";
};

context tests {
    testCode<string>: "";
    framework<string>: "vanilla";
};

Task generate_documentation {
    meta: true;
    prompt: "Read the requirements, code implementation, and tests from their respective context nodes using get_context_value. Generate markdown documentation including: function signature, description, parameters, return value, examples, and how to run tests. Use set_context_value to store the documentation in the 'documentation' context node with key 'markdown' as a string.";
};

context documentation {
    markdown<string>: "";
    format<string>: "markdown";
};

Task validation {
    meta: true;
    prompt: "Review the generated code, tests, and documentation from their context nodes using get_context_value. Check for completeness and quality. If everything looks good, use set_context_value to store a validation summary in 'validation_result' context with key 'status' as 'passed' and 'summary' with any notes. Then use the transition tool to move to 'complete'.";
};

context validation_result {
    status<string>: "pending";
    summary<string>: "";
};

state complete {
    desc: "Code generation workflow completed successfully";
};

// Define the workflow
start -> define_requirements;
define_requirements -specified-> requirements;
requirements -> generate_code;
generate_code -generated-> code;
code -> generate_tests;
generate_tests -created-> tests;
tests -> generate_documentation;
generate_documentation -documented-> documentation;
documentation -> validation;
validation -validated-> validation_result;
validation_result -> complete;
