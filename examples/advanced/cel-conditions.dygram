machine "CEL Condition Examples"

// This example demonstrates Common Expression Language (CEL) conditions
// for safe, sandboxed expression evaluation in edge transitions

// Example 1: Simple Numeric Conditions
context counter {
    count<number>: 0;
    maxCount<number>: 10;
    minCount<number>: 0;
}

state start "Start";
task increment "Increment Counter";
task decrement "Decrement Counter";
state complete "Complete";

start -> increment;

// Numeric comparison operators
increment -if: '(count < maxCount)';-> increment;
increment -if: '(count >= maxCount)';-> complete;
decrement -if: '(count > minCount)';-> decrement;
decrement -if: '(count <= minCount)';-> start;

// Example 2: String Conditions
context userState {
    status<string>: "pending";
    role<string>: "user";
}

task validateUser "Validate User";
state processing "Processing";
state admin "Admin Flow";
state user "User Flow";
state rejected "Rejected";

start -> validateUser;

// String equality
validateUser -if: '(status == "approved")';-> processing;
validateUser -if: '(status == "rejected")';-> rejected;

// Multiple conditions with AND
validateUser -if: '(status == "approved" && role == "admin")';-> admin;
validateUser -if: '(status == "approved" && role == "user")';-> user;

// Example 3: Boolean Logic
context config {
    debug<boolean>: false;
    production<boolean>: true;
    enableFeatureX<boolean>: true;
}

task checkEnvironment "Check Environment";
state debugMode "Debug Mode";
state productionMode "Production Mode";
state featureEnabled "Feature Enabled";

start -> checkEnvironment;

// Boolean conditions
checkEnvironment -if: '(debug == true)';-> debugMode;
checkEnvironment -if: '(production == true)';-> productionMode;

// OR conditions
checkEnvironment -if: '(debug == true || enableFeatureX == true)';-> featureEnabled;

// NOT conditions
checkEnvironment -unless: '(production == true)';-> debugMode;

// Example 4: Error Handling with Built-in Variables
task riskyOperation "Risky Operation";
task errorHandler "Error Handler";
task retry "Retry Logic";
state errorState "Error State";
state success "Success";

riskyOperation -> success;

// Using built-in errorCount variable
riskyOperation -if: '(errorCount > 0)';-> errorHandler;
errorHandler -if: '(errorCount < 3)';-> retry;
errorHandler -if: '(errorCount >= 3)';-> errorState;

// Example 5: Complex Nested Conditions
context retryConfig {
    maxRetries<number>: 3;
    currentRetries<number>: 0;
    circuitState<string>: "CLOSED";
    timeoutMs<number>: 5000;
}

task apiCall "API Call";
task retryHandler "Retry Handler";
state circuitOpen "Circuit Open";
state failed "Failed";

start -> apiCall;

// Complex condition with multiple clauses
apiCall -if: '(currentRetries < maxRetries && circuitState == "CLOSED" && errorCount < 5)';-> retryHandler;
apiCall -if: '(currentRetries >= maxRetries || errorCount >= 5)';-> failed;
apiCall -if: '(circuitState == "OPEN")';-> circuitOpen;

// Parenthesized complex conditions
retryHandler -if: '((currentRetries < maxRetries) && (circuitState == "CLOSED"))';-> apiCall;
retryHandler -if: '((errorCount > 3) || (currentRetries >= maxRetries))';-> failed;

// Example 6: Template Variable Syntax
context userData {
    name<string>: "john";
    age<number>: 25;
    verified<boolean>: true;
}

task processUser "Process User";
state adult "Adult User";
state minor "Minor User";
state verified "Verified User";

start -> processUser;

// Using template variable syntax (automatically converted to CEL)
processUser -if: '({{ userData.age }} >= 18)';-> adult;
processUser -if: '({{ userData.age }} < 18)';-> minor;
processUser -if: '({{ userData.verified }} == true)';-> verified;

// Template variables with complex conditions
processUser -if: '({{ userData.age }} >= 18 && {{ userData.verified }} == true)';-> verified;

// Example 7: Nested Attribute Access
context system {
    database {
        connected<boolean>: true;
        latency<number>: 50;
    };
    cache {
        enabled<boolean>: true;
        hitRate<number>: 85;
    };
}

task systemCheck "System Check";
state healthy "System Healthy";
state degraded "System Degraded";

start -> systemCheck;

// Accessing nested attributes
systemCheck -if: '(database.connected == true && database.latency < 100)';-> healthy;
systemCheck -if: '(cache.enabled == true && cache.hitRate > 80)';-> healthy;
systemCheck -if: '(database.latency >= 100 || cache.hitRate <= 80)';-> degraded;

// Example 8: Real-World Pattern - Circuit Breaker
context circuitBreaker {
    failureCount<number>: 0;
    threshold<number>: 5;
    state<string>: "CLOSED";
    lastFailureTime<number>: 0;
    timeout<number>: 30000;
}

task protectedOperation "Protected Operation";
state circuitBreakerOpen "Circuit Breaker Open";
task waitForTimeout "Wait for Timeout";
state halfOpen "Half Open";

start -> protectedOperation;

// Circuit breaker logic
protectedOperation -if: '(failureCount < threshold && circuitBreaker.state == "CLOSED")';-> success;
protectedOperation -if: '(failureCount >= threshold)';-> circuitBreakerOpen;
circuitBreakerOpen -> waitForTimeout;
waitForTimeout -if: '(circuitBreaker.state == "HALF_OPEN")';-> protectedOperation;

note for validateUser "CEL (Common Expression Language) provides safe, sandboxed expression evaluation.
No access to JavaScript globals or functions - secure by design."

note for apiCall "Operators:
- Equality: == (not ===)
- Inequality: != (not !==)
- Comparison: <, >, <=, >=
- Logical: &&, ||, !
- Parentheses: () for grouping"

note for checkEnvironment "Best practices:
1. Keep conditions simple and readable
2. Use parentheses for clarity
3. Leverage context nodes for configuration
4. Test edge cases thoroughly"
