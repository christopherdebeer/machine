machine "Dependency Inference Examples"

// Configuration contexts
context apiConfig {
    baseUrl<string>: "https://api.example.com";
    apiKey<string>: "secret123";
    timeout<number>: 5000;
    retries<number>: 3;
}

context dbConfig {
    host<string>: "localhost";
    port<number>: 5432;
    database<string>: "myapp";
}

// Task that uses API configuration
task fetchUserData {
    prompt: "Fetch user data from {{ apiConfig.baseUrl }}/users with API key {{ apiConfig.apiKey }}";
    timeout: 10000;
}

// Task that uses database configuration
task saveUserData {
    prompt: "Save user data to {{ dbConfig.database }} at {{ dbConfig.host }}:{{ dbConfig.port }}";
}

// Task that references another task
task processUserData {
    prompt: "Process the data fetched by {{ fetchUserData.prompt }} and prepare for {{ saveUserData.prompt }}";
}

// Workflow edges
fetchUserData -> processUserData;
processUserData -> saveUserData;

// DyGram will automatically infer these dependencies:
// fetchUserData ..> apiConfig : reads prompt
// saveUserData ..> dbConfig : reads prompt
// processUserData ..> fetchUserData : reads prompt
// processUserData ..> saveUserData : reads prompt

// Another example with nested references
context emailConfig {
    smtpHost<string>: "smtp.example.com";
    smtpPort<number>: 587;
    fromEmail<string>: "noreply@example.com";
}

task sendNotification {
    prompt: "Send email notification from {{ emailConfig.fromEmail }} via {{ emailConfig.smtpHost }}:{{ emailConfig.smtpPort }}";
}

// Connect notification to workflow
processUserData -> sendNotification;

// Inferred: sendNotification ..> emailConfig : reads prompt

// Complex example with multiple references
context appConfig {
    appName<string>: "MyApp";
    version<string>: "1.0.0";
    environment<string>: "production";
}

task logOperation {
    prompt: "Log operation in {{ appConfig.appName }} v{{ appConfig.version }} ({{ appConfig.environment }})";
}

// Logging attached to multiple points
fetchUserData -> logOperation;
processUserData -> logOperation;
saveUserData -> logOperation;

// Inferred: logOperation ..> appConfig : reads prompt (from multiple attributes)
