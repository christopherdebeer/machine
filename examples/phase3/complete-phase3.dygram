machine "Phase 3: Complete Feature Demo"

// Configuration context with generic types
context apiConfig @Singleton {
    endpoint<string>: "https://api.example.com";
    headers<Map<string, string>>: ["Authorization", "Bearer token"];
    retries<number>: 3;
}

// Abstract base task with generic result type
task BaseTask @Abstract {
    result<Promise<any>>: "pending";
    status<string>: "initialized";
}

// Concrete tasks extending base
task FetchTask @Async {
    data<Promise<Response>>: "pending";
}

task TransformTask {
    output<Array<Record>>: [];
}

// States
state Success {
    message<string>: "Operation completed";
}

state Error {
    error<Optional<string>>: "none";
}

// Relationships with annotations
BaseTask <|-- FetchTask;
BaseTask <|-- TransformTask;

FetchTask "1" --> "1" TransformTask;
TransformTask "1" --> "0..1" Success;
TransformTask "1" --> "0..1" Error;

// Documentation notes
note for apiConfig "Singleton configuration for API access. Contains endpoint URL, authentication headers, and retry policy."

note for FetchTask "Asynchronous task that fetches data from the API. Returns Promise<Response> which resolves to the HTTP response."

note for TransformTask "Transforms the raw API response into an array of typed records. Handles data validation and normalization."

note for Success "Indicates successful completion. All data has been fetched and transformed."

note for Error "Error state with optional error message. Triggered on API failures or transformation errors."
