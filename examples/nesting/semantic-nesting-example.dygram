machine "Semantic Nesting Example"

// Context nodes at the top level
context globalConfig {
    apiEndpoint: "https://api.example.com";
    timeout: 5000;
    retryCount: 3;
}

// Data Pipeline with nested structure and context inheritance
task DataPipeline "Data Processing Pipeline" {

    // Context shared within the pipeline
    context pipelineState {
        recordsProcessed: 0;
        errors: 0;
        status: "initializing";
    }

    // Validation phase
    task ValidationPhase "Data Validation" {
        task fetchData {
            prompt: "Fetch data from the API endpoint specified in globalConfig";
        }

        task validateSchema {
            prompt: "Validate the data schema";
        }

        task checkQuality {
            prompt: "Check data quality metrics";
        }
    }

    // Processing phase
    task ProcessingPhase "Data Transformation" {
        task transform {
            prompt: "Transform the validated data";
        }

        task enrich {
            prompt: "Enrich data with additional information";
        }

        task aggregate {
            prompt: "Aggregate processed data";
        }
    }

    // Storage phase
    task StoragePhase "Data Storage" {
        context storageConfig {
            database: "primary";
            batchSize: 100;
        }

        task prepareData {
            prompt: "Prepare data for storage";
        }

        task writeData {
            prompt: "Write data to storage";
        }

        task verifyStorage {
            prompt: "Verify data was stored correctly";
        }
    }
}

// Simple workflow coordinator at top level
task start {
    prompt: "Initialize the data pipeline";
}

task end {
    prompt: "Finalize and report results";
}

// Workflow using qualified names to reference nested nodes
start -> DataPipeline.ValidationPhase.fetchData;

// Within ValidationPhase
DataPipeline.ValidationPhase.fetchData -> DataPipeline.ValidationPhase.validateSchema;
DataPipeline.ValidationPhase.validateSchema -> DataPipeline.ValidationPhase.checkQuality;

// Transition to ProcessingPhase
DataPipeline.ValidationPhase.checkQuality -> DataPipeline.ProcessingPhase.transform;

// Within ProcessingPhase
DataPipeline.ProcessingPhase.transform -> DataPipeline.ProcessingPhase.enrich;
DataPipeline.ProcessingPhase.enrich -> DataPipeline.ProcessingPhase.aggregate;

// Transition to StoragePhase
DataPipeline.ProcessingPhase.aggregate -> DataPipeline.StoragePhase.prepareData;

// Within StoragePhase
DataPipeline.StoragePhase.prepareData -> DataPipeline.StoragePhase.writeData;
DataPipeline.StoragePhase.writeData -> DataPipeline.StoragePhase.verifyStorage;

// Complete the pipeline
DataPipeline.StoragePhase.verifyStorage -> end;

// Context relationships
// DataPipeline reads global configuration
DataPipeline -reads-> globalConfig;

// DataPipeline writes to its own state
DataPipeline -writes-> DataPipeline.pipelineState;

// ValidationPhase tasks inherit read access to globalConfig and pipelineState
// No explicit edges needed - inheritance provides access

// ProcessingPhase tasks also inherit access
// ProcessingPhase.transform updates pipeline state
DataPipeline.ProcessingPhase.transform -writes-> DataPipeline.pipelineState;

// StoragePhase has its own config and inherits parent contexts
// StoragePhase nodes can read storageConfig, pipelineState, and globalConfig
DataPipeline.StoragePhase.writeData -writes-> DataPipeline.pipelineState;

// Error handling node at top level
task handleError {
    prompt: "Handle any errors that occurred during pipeline execution";
}

// Error transitions (can be triggered from any phase)
DataPipeline.ValidationPhase.validateSchema -error-> handleError;
DataPipeline.ProcessingPhase.transform -error-> handleError;
DataPipeline.StoragePhase.writeData -error-> handleError;

note for DataPipeline "This pipeline demonstrates semantic nesting with qualified names and context inheritance. Child tasks automatically inherit read-only access to parent context nodes."

note for DataPipeline.ValidationPhase.fetchData "This task inherits read access to globalConfig (from DataPipeline) and pipelineState (from DataPipeline) without explicit edges."

note for DataPipeline.StoragePhase.prepareData "This task inherits access to globalConfig and pipelineState from ancestors, plus storageConfig from its direct parent."
