machine "Phase 4: Complete Validated Example"

// This example demonstrates all Phase 4 validation features working together
// All validation checks pass for this machine

// ========== Configuration Context ==========

context apiConfig @Singleton {
    baseUrl<string>: "https://api.example.com";
    apiKey<string>: "secret-key-12345";
    timeout<number>: 5000;
    maxRetries<number>: 3;
}

context appSettings {
    debugMode<boolean>: false;
    logLevel<string>: "INFO";
    cacheSize<number>: 1000;
}

// ========== Abstract Base Classes ==========

task BaseDataProcessor @Abstract {
    version<string>: "2.0";
    retries<number>: 3;
}

task BaseValidator @Abstract {
    strictMode<boolean>: true;
}

// ========== Concrete Task Implementations ==========

task DataFetcher @Async {
    url<string>: "{{ apiConfig.baseUrl }}/data";
    response<Promise<Response>>: "pending";
    timeoutMs<number>: 10;
}

task DataProcessor {
    input<Array<Record>>: [];
    output<Map<string, any>>: [];
    processedCount<number>: 0;
}

task DataValidator {
    rules<Array<string>>: ["required", "format", "range"];
    validationResult<boolean>: false;
}

task DataPersister @Async {
    saveLocation<string>: "database";
    saved<boolean>: false;
}

// ========== Service Tasks ==========

task CacheService @Singleton {
    cacheData<Map<string, any>>: [];
    hitRate<number>: 0;
}

task LoggingService @Singleton {
    logs<Array<string>>: [];
    level<string>: "{{ appSettings.logLevel }}";
}

// ========== State Nodes ==========

state ValidationPassed {
    timestamp<number>: 0;
    recordCount<number>: 0;
}

state ValidationFailed {
    errors<Array<string>>: [];
    failureReason<string>: "unknown";
}

state ProcessingComplete {
    duration<number>: 0;
    status<string>: "success";
}

state ProcessingError {
    errorMessage<string>: "An error occurred";
    stackTrace<string>: "";
}

// ========== Clear Entry Point ==========

init start {
    startTime<number>: 0;
    initiator<string>: "system";
}

// ========== Inheritance Relationships ==========

// Valid inheritance: same node types
BaseDataProcessor <|-- DataFetcher;
BaseDataProcessor <|-- DataProcessor;
BaseValidator <|-- DataValidator;

// ========== Execution Flow (No Cycles, No Unreachable Nodes) ==========

// Entry point flows to data fetching
start -> DataFetcher;

// Fetched data is validated
DataFetcher -> DataValidator;

// Validation outcomes
DataValidator -> ValidationPassed;
DataValidator -> ValidationFailed;

// Passed validation proceeds to processing
ValidationPassed -> DataProcessor;

// Failed validation goes to error state
ValidationFailed -> ProcessingError;

// Processed data is persisted
DataProcessor -> DataPersister;

// Persistence outcomes
DataPersister -> ProcessingComplete;
DataPersister -> ProcessingError;

// ========== Dependencies ==========

// Inferred dependencies from template variables:
// - DataFetcher depends on apiConfig (via url template)
// - LoggingService depends on appSettings (via level template)

// These are automatically detected by the dependency analyzer

// ========== Notes on Validation ==========

note for start "Entry point for the data processing pipeline. All validation checks pass."

note for apiConfig "Configuration context - properly has no incoming edges"

note for BaseDataProcessor "Abstract base class - properly marked with @Abstract annotation"

note for DataFetcher "Async task properly marked with @Async annotation"

note for ProcessingComplete "Exit point - has no outgoing edges (expected)"

// ========== Validation Summary ==========

// ✅ Type Checking:
//    - All type annotations match their values
//    - Generic types are properly formatted
//    - Template references are valid

// ✅ Graph Structure:
//    - Clear entry point: start (init node)
//    - Clear exit points: ProcessingComplete, ProcessingError
//    - No unreachable nodes
//    - No orphaned nodes
//    - Intentional cycle-free design

// ✅ Semantic Validation:
//    - Init node (start) has outgoing edges
//    - Context nodes (apiConfig, appSettings) have no incoming edges
//    - @Async annotations only on task nodes
//    - @Abstract annotations on base classes (tasks)
//    - @Singleton annotations on services and contexts
//    - Inheritance relationships between same node types

// ✅ All Phase 4 validations pass successfully!
